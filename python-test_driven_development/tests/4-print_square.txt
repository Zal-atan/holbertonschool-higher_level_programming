The ``Print_Square`` module
======================

Using ``print_square``
-------------------

Import print_square function to doctest
>>> print_square = __import__('4-print_square').print_square

``print_square`` should print a square of length and width equal to input size

Testing Correct Use Case
========================

Testing a square of size 4
>>> print_square(4)
####
####
####
####

Testing a square of size 0
>>> print_square(0)

Testing a square of size 1
>>> print_square(1)
#

Testing a square of size 10
>>> print_square(10)
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########



``print_square`` should not work with a negative number or anything other than
type integer. In this scenario, a TypeError should be raaised.

Testing Incorrect Inputs
============================

Testing an input as a string in matrix input
>>> print_square("String")
Traceback (most recent call last):
TypeError: size must be an integer

Testing an input of a Boolean in div input
>>> print_square(True)
Traceback (most recent call last):
TypeError: size must be an integer

Testing an input of float
>>> print_square(2.5)
Traceback (most recent call last):
TypeError: size must be an integer

Testing an input less than 0
>>> print_square(-5)
Traceback (most recent call last):
ValueError: size must be >= 0

Testing a square with None as input
>>> print_square(None)
Traceback (most recent call last):
TypeError: size must be an integer

Testing no input
>>> print_square()
Traceback (most recent call last):
TypeError: print_square() missing 1 required positional argument: 'size'

Testing more than one Inputs
>>> print_square(3, 6)
Traceback (most recent call last):
TypeError: print_square() takes 1 positional argument but 2 were given
